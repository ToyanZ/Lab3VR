//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""e3017747-c732-42eb-ac04-fc1f15d78952"",
            ""actions"": [
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""df88f0ab-8410-4272-80d4-f54c1eceae38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thumbstick"",
                    ""type"": ""Value"",
                    ""id"": ""28d5de8d-837b-4c7a-8368-79ed0318b798"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Button"",
                    ""id"": ""93752df3-42ef-456e-94d6-61974aee1eca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""e0caec0e-794d-443d-b3b6-a125442c2d02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""7059f417-efb0-424b-8a3e-8adaed251175"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75a02ef3-5e8d-4c5d-ac7c-c7aed01a2a38"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VRController"",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0129e09-9820-4ca9-bda4-1a277b77b022"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d64a1bd6-d99b-4056-abae-39c902038672"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VRController"",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06927fcd-c619-425f-b576-5dac0dfaddff"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VRController"",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""319eae16-9403-45fd-8a20-827c6191411f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VRController"",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GUIInteraction"",
            ""id"": ""a5a04b60-bf70-4099-8e02-9c98ae20cc1c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1cca65ee-9ee6-4053-b3eb-fca50980803a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8905a44f-d68a-4ae8-b342-9da5848c4a58"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VRController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""VRController"",
            ""bindingGroup"": ""VRController"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Trigger = m_Gameplay.FindAction("Trigger", throwIfNotFound: true);
        m_Gameplay_Thumbstick = m_Gameplay.FindAction("Thumbstick", throwIfNotFound: true);
        m_Gameplay_Grip = m_Gameplay.FindAction("Grip", throwIfNotFound: true);
        m_Gameplay_PrimaryButton = m_Gameplay.FindAction("PrimaryButton", throwIfNotFound: true);
        m_Gameplay_SecondaryButton = m_Gameplay.FindAction("SecondaryButton", throwIfNotFound: true);
        // GUIInteraction
        m_GUIInteraction = asset.FindActionMap("GUIInteraction", throwIfNotFound: true);
        m_GUIInteraction_Newaction = m_GUIInteraction.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Trigger;
    private readonly InputAction m_Gameplay_Thumbstick;
    private readonly InputAction m_Gameplay_Grip;
    private readonly InputAction m_Gameplay_PrimaryButton;
    private readonly InputAction m_Gameplay_SecondaryButton;
    public struct GameplayActions
    {
        private @InputControls m_Wrapper;
        public GameplayActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Trigger => m_Wrapper.m_Gameplay_Trigger;
        public InputAction @Thumbstick => m_Wrapper.m_Gameplay_Thumbstick;
        public InputAction @Grip => m_Wrapper.m_Gameplay_Grip;
        public InputAction @PrimaryButton => m_Wrapper.m_Gameplay_PrimaryButton;
        public InputAction @SecondaryButton => m_Wrapper.m_Gameplay_SecondaryButton;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @Thumbstick.started += instance.OnThumbstick;
            @Thumbstick.performed += instance.OnThumbstick;
            @Thumbstick.canceled += instance.OnThumbstick;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @Thumbstick.started -= instance.OnThumbstick;
            @Thumbstick.performed -= instance.OnThumbstick;
            @Thumbstick.canceled -= instance.OnThumbstick;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // GUIInteraction
    private readonly InputActionMap m_GUIInteraction;
    private List<IGUIInteractionActions> m_GUIInteractionActionsCallbackInterfaces = new List<IGUIInteractionActions>();
    private readonly InputAction m_GUIInteraction_Newaction;
    public struct GUIInteractionActions
    {
        private @InputControls m_Wrapper;
        public GUIInteractionActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_GUIInteraction_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_GUIInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GUIInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IGUIInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_GUIInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GUIInteractionActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IGUIInteractionActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IGUIInteractionActions instance)
        {
            if (m_Wrapper.m_GUIInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGUIInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_GUIInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GUIInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GUIInteractionActions @GUIInteraction => new GUIInteractionActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_VRControllerSchemeIndex = -1;
    public InputControlScheme VRControllerScheme
    {
        get
        {
            if (m_VRControllerSchemeIndex == -1) m_VRControllerSchemeIndex = asset.FindControlSchemeIndex("VRController");
            return asset.controlSchemes[m_VRControllerSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnTrigger(InputAction.CallbackContext context);
        void OnThumbstick(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnPrimaryButton(InputAction.CallbackContext context);
        void OnSecondaryButton(InputAction.CallbackContext context);
    }
    public interface IGUIInteractionActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
